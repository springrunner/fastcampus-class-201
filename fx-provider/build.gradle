plugins { // 프로젝트에서 사용하는 그레이들 플러그인 정의
    id 'org.springframework.boot' version '2.7.1' apply false
    id 'java'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2" apply false
    id "com.epages.restdocs-api-spec" version "0.16.2" apply false
    id 'jacoco'
}

allprojects { // 모든 프로젝트에 반영되는 부분
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io'}
    }
}

def javaProjects = [ // Java 로 작성된 소스코드에 대한 공통작업 선언
	project(":fx-common"), 
	project(":fx-core"), 
	project(":fx-admin:fx-admin-server"),
	project(":fx-api"), 
	project(":fx-collector"), 
	project(":fx-worker"),
    project(":clients:feign-common"),
    project(":clients:currency-layer"),
    project(":clients:kafka"),
    project(":clients:toast"),
    project(":clients:aws-resource"),
]
configure(javaProjects) {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    group = "${projectGroup}"
    version = "${projectVersion}-${new Date().format('yyyyMMddHHmmss')}"

    sourceCompatibility = 11
    targetCompatibility = 11

    /**
     * @see <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import">Importing Maven BOMs</a>
     * @see <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies">Importing Dependencies</a>
     */
    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:2021.0.3")
            mavenBom("io.awspring.cloud:spring-cloud-aws-dependencies:2.4.2")
            mavenBom("com.amazonaws:aws-java-sdk-bom:1.12.262")
            mavenBom("org.testcontainers:testcontainers-bom:1.17.3")
        }
    }

    dependencies {
        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        implementation("org.springframework.boot:spring-boot-starter-logging")

        testImplementation("org.springframework.boot:spring-boot-starter-test")
        testImplementation(testFixtures(project(":fx-core")))
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
        jacoco {
            enabled = true
            destinationFile = file("${buildDir}/jacoco/jacoco.exec")
        }
        finalizedBy jacocoTestReport

        useJUnitPlatform { //jUnit5 수행
            excludeTags("integrationTest")
        }
    }

    /**
     * @see <a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html">Build Script Basics</a>
     */
    tasks.register("integrationTest", Test) {
        useJUnitPlatform {
            includeTags("integration")
        }
        finalizedBy "jacocoTestReport"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.setDestination(file("${buildDir}/reports/jacoco/html"))
        }
        getExecutionData().setFrom(files("${buildDir}/jacoco/jacoco.exec"))
    }
}

def querydslProjects = [
        project(":fx-admin:fx-admin-server"),
        project(":fx-core"),
        project(":fx-api"),
        project(":fx-worker"),
        project(":fx-collector")
]
configure(querydslProjects) {
    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")
        implementation("com.querydsl:querydsl-core")
        implementation("com.querydsl:querydsl-jpa")

        annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
        annotationProcessor("jakarta.persistence:jakarta.persistence-api")
        annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    }
}

/**
 * @see <a href="https://docs.spring.io/spring-restdocs/docs/current/reference/html5/#getting-started-build-configuration">Build configuration<a/>
 * @see <a href="https://github.com/ePages-de/restdocs-api-spec">Spring REST Docs API specification Integration</a>
 */
def requiredRestDocsProject = [
        project(":fx-api")
]
configure(requiredRestDocsProject) {
    apply plugin: "org.asciidoctor.jvm.convert"
    apply plugin: "com.epages.restdocs-api-spec"

    configurations {
        asciidoctorEx
    }

    ext {
        set("snippetsDir", file("build/generated-snippets"))
    }

    dependencies {
        testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
        testImplementation("com.epages:restdocs-api-spec:0.16.2")
        testImplementation("com.epages:restdocs-api-spec-mockmvc:0.16.2")

        asciidoctorEx("org.springframework.restdocs:spring-restdocs-asciidoctor")
    }

    tasks.register("docsTest", Test) {
        outputs.dir snippetsDir
        useJUnitPlatform {
            includeTags("docsTest")
        }
        finalizedBy "jacocoTestReport"
        finalizedBy "asciidoctor"
        finalizedBy "openapi3"
    }

    /**
     * 개발환경에서만 API를 제공하고자 한다면 빌드태스크에 asciidoctor 를 추가합니다.
     * asciidoctor 가 수행될 때 통합테스트 실행태스크 integrationTest 를 수행하기에
     * 별도로 integrationTest 를 수행하지 않아도 됩니다.
     *
     * ex) <code>./gradlew clean asciidoctor build</code>
     */
    tasks.named("asciidoctor") {
        inputs.dir snippetsDir
        configurations "asciidoctorEx"
        baseDirFollowsSourceDir() // 원본파일 .adoc 디렉터리 기준
    }

    /**
     * @see <a href="https://github.com/ePages-de/restdocs-api-spec">Spring REST Docs API specification Integration</a>
     */
    openapi3 {
        servers = [
                {url = "http://localhost:8092"}
        ]
        title = "fx-api OpenApi Specification"
        version = "${projectVersion}"
        format = "yaml"
    }

    bootJar {
        from("${asciidoctor.outputDir}") {
            into "BOOT-INF/classes/static/docs"
        }
        from("swagger-ui") {
            into "BOOT-INF/classes/static/swagger-ui"
        }
        from("${project.projectDir}/build/api-spec/openapi3.yaml") {
            into "BOOT-INF/classes/static/swagger-ui"
        }
    }
}